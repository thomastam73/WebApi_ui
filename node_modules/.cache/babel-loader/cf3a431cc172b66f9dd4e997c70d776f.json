{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI-f988824d18fbe1260d3a85c4dcd7902a93f4ed19/src/views/Client/ClientDashboard/ClientDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport { drawRect } from \"./utilities\";\n\nconst ClientDashboard = () => {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [isOnline, setIsOnline] = useState(null);\n\n  const runCoco = async () => {\n    const net = await tf.loadGraphModel(\"https://signlanguage-tensorflow.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\");\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const stopCoco = async () => {\n    const net = await tf.loadGraphModel(\"https://signlanguage-tensorflow.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\");\n    clearInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n      const img = tf.browser.fromPixels(video);\n      const resized = tf.image.resizeBilinear(img, [640, 480]);\n      const casted = resized.cast(\"int32\");\n      const expanded = casted.expandDims(0);\n      const obj = await net.executeAsync(expanded);\n      const boxes = await obj[1].array();\n      const classes = await obj[2].array();\n      const scores = await obj[4].array();\n      const ctx = canvasRef.current.getContext(\"2d\");\n      requestAnimationFrame(() => {\n        drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx);\n      });\n      tf.dispose(img);\n      tf.dispose(resized);\n      tf.dispose(casted);\n      tf.dispose(expanded);\n      tf.dispose(obj);\n    }\n  };\n\n  useEffect(() => {\n    runCoco(); // 指定如何在這個 effect 之後執行清除：\n\n    return function cleanup() {\n      stopCoco();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      muted: true,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 0,\n        textAlign: \"center\",\n        zindex: 9,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 0,\n        textAlign: \"center\",\n        zindex: 8,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClientDashboard, \"0yl0BluAOjcLmjnWiUiDGuTN+Ms=\");\n\n_c = ClientDashboard;\nexport default ClientDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientDashboard\");","map":{"version":3,"sources":["/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI-f988824d18fbe1260d3a85c4dcd7902a93f4ed19/src/views/Client/ClientDashboard/ClientDashboard.js"],"names":["React","useRef","useEffect","useState","tf","Webcam","drawRect","ClientDashboard","webcamRef","canvasRef","isOnline","setIsOnline","runCoco","net","loadGraphModel","setInterval","detect","stopCoco","clearInterval","current","video","readyState","videoWidth","videoHeight","width","height","img","browser","fromPixels","resized","image","resizeBilinear","casted","cast","expanded","expandDims","obj","executeAsync","boxes","array","classes","scores","ctx","getContext","requestAnimationFrame","dispose","cleanup","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport { drawRect } from \"./utilities\";\n\nconst ClientDashboard = () => {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [isOnline, setIsOnline] = useState(null);\n\n  const runCoco = async () => {\n    const net = await tf.loadGraphModel(\n      \"https://signlanguage-tensorflow.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\"\n    );\n\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const stopCoco = async () => {\n    const net = await tf.loadGraphModel(\n      \"https://signlanguage-tensorflow.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\"\n    );\n\n    clearInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const img = tf.browser.fromPixels(video);\n      const resized = tf.image.resizeBilinear(img, [640, 480]);\n      const casted = resized.cast(\"int32\");\n      const expanded = casted.expandDims(0);\n      const obj = await net.executeAsync(expanded);\n\n      const boxes = await obj[1].array();\n      const classes = await obj[2].array();\n      const scores = await obj[4].array();\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      requestAnimationFrame(() => {\n        drawRect(\n          boxes[0],\n          classes[0],\n          scores[0],\n          0.8,\n          videoWidth,\n          videoHeight,\n          ctx\n        );\n      });\n\n      tf.dispose(img);\n      tf.dispose(resized);\n      tf.dispose(casted);\n      tf.dispose(expanded);\n      tf.dispose(obj);\n    }\n  };\n\n  useEffect(() => {\n    runCoco();\n\n    // 指定如何在這個 effect 之後執行清除：\n    return function cleanup() {\n      stopCoco();\n    };\n  }, []);\n\n  return (\n    <div>\n      <Webcam\n        ref={webcamRef}\n        muted={true}\n        style={{\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480,\n        }}\n      />\n\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 8,\n          width: 640,\n          height: 480,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ClientDashboard;\n"]},"metadata":{},"sourceType":"module"}