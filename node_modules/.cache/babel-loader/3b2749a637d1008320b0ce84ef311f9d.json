{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI-f988824d18fbe1260d3a85c4dcd7902a93f4ed19/src/components/RouteWithLayout/AuthRouteWithLayout.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport JwtDecode from 'jwt-decode';\nimport PropTypes from 'prop-types';\n\nconst AuthRoute = ({\n  layout: Layout,\n  component: Component,\n  ...rest\n}) => {\n  let authUser;\n\n  const isAuthenticated = () => {\n    const token = localStorage.getItem('Token');\n\n    if (token) {\n      const decodedToken = JwtDecode(token);\n      authUser = decodedToken;\n\n      if (decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem('Token');\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => isAuthenticated() ? /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Component, { ...props,\n        authUser: authUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/signin',\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AuthRoute;\nAuthRoute.propTypes = {\n  layout: PropTypes.func.isRequired,\n  component: PropTypes.func.isRequired // location: PropTypes.string.isRequired,\n\n};\nexport default AuthRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRoute\");","map":{"version":3,"sources":["/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI-f988824d18fbe1260d3a85c4dcd7902a93f4ed19/src/components/RouteWithLayout/AuthRouteWithLayout.js"],"names":["React","Route","Redirect","JwtDecode","PropTypes","AuthRoute","layout","Layout","component","Component","rest","authUser","isAuthenticated","token","localStorage","getItem","decodedToken","exp","Date","now","removeItem","props","pathname","state","from","location","propTypes","func","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,MAAM,EAAEC,MAAV;AAAkBC,EAAAA,SAAS,EAAEC,SAA7B;AAAwC,KAAGC;AAA3C,CAAD,KAAuD;AACvE,MAAIC,QAAJ;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC5B,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACT,YAAMG,YAAY,GAAGb,SAAS,CAACU,KAAD,CAA9B;AACAF,MAAAA,QAAQ,GAAGK,YAAX;;AACA,UAAIA,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA9B,EAA0C;AACxCL,QAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACA,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAZD;;AAcA,sBACE,QAAC,KAAD,OACMV,IADN;AAEE,IAAA,MAAM,EAAGW,KAAD,IACNT,eAAe,kBACb,QAAC,MAAD;AAAA,6BACE,QAAC,SAAD,OAAeS,KAAf;AAAsB,QAAA,QAAQ,EAAEV;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADa,gBAKb,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFW,QAAAA,QAAQ,EAAE,SADR;AAEFC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AADP;AAFL;AADN;AAAA;AAAA;AAAA;AAAA;AARN;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAtCD;;KAAMpB,S;AAwCNA,SAAS,CAACqB,SAAV,GAAsB;AACpBpB,EAAAA,MAAM,EAAEF,SAAS,CAACuB,IAAV,CAAeC,UADH;AAEpBpB,EAAAA,SAAS,EAAEJ,SAAS,CAACuB,IAAV,CAAeC,UAFN,CAGpB;;AAHoB,CAAtB;AAMA,eAAevB,SAAf","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport JwtDecode from 'jwt-decode';\nimport PropTypes from 'prop-types';\n\nconst AuthRoute = ({ layout: Layout, component: Component, ...rest }) => {\n  let authUser;\n\n  const isAuthenticated = () => {\n    const token = localStorage.getItem('Token');\n    if (token) {\n      const decodedToken = JwtDecode(token);\n      authUser = decodedToken;\n      if (decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem('Token');\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated() ? (\n          <Layout>\n            <Component {...props} authUser={authUser} />\n          </Layout>\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/signin',\n              state: {\n                from: props.location,\n              },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nAuthRoute.propTypes = {\n  layout: PropTypes.func.isRequired,\n  component: PropTypes.func.isRequired,\n  // location: PropTypes.string.isRequired,\n};\n\nexport default AuthRoute;\n"]},"metadata":{},"sourceType":"module"}